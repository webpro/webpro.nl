<input type="search" id="search" placeholder="Search..." autocomplete="off" aria-label="Search this site" />

<style>
  input {
    width: 12ch;
    font-size: 0.8em;
    background-color: var(--bg-color);
    border: none;
    border-radius: 20px;
    box-shadow: 0 0 4px var(--font-color);
    position: relative;
    margin-right: 1em;
    padding: 4px 3px 4px 1em;
    transition: width 0.3s;
  }

  input:focus {
    width: 20ch;
  }
</style>

<style is:global>
  #search-results {
    background-color: var(--bg-color-header);
    position: absolute;
    top: 64px;
    right: 0;
    font-size: 1em;
    padding: 1em;
    text-align: right;
    border-bottom: 1px solid var(--lighter-grey);
    width: 100%;
  }

  #search-results ol {
    list-style: none;
  }

  #search-results ol li {
    margin: 0.3em;
  }
</style>

<script>
  import MiniSearch from 'minisearch';

  let searchIndex;
  try {
    searchIndex = await fetch('/search.json').then(response => response.text());
  } catch (error) {
    console.warn(error);
  }

  const index = MiniSearch.loadJSON(searchIndex, { fields: ['title', 'content'] });

  const initialQuery = new URLSearchParams(window.location.search).get('q');
  const input = document.querySelector('input[type=search]');
  input.value = initialQuery;
  const container = document.createElement('div');
  container.setAttribute('id', 'search-results');

  const search = query => {
    if (query.length > 1) {
      const results = index.search(query, { boost: { title: 3 }, prefix: true, fuzzy: 0.3 });
      const list = document.createElement('ol');
      results.slice(0, 10).forEach(result => {
        const item = document.createElement('li');
        const link = document.createElement('a');
        link.setAttribute('href', result.pathname);
        link.appendChild(document.createTextNode(result.title));
        item.appendChild(link);
        list.append(item);
      });
      container.replaceChildren(list);
      input.after(container);
    } else {
      container.parentNode?.removeChild(container);
    }
  };

  input.addEventListener('input', event => {
    search(event.target.value);
  });

  document.addEventListener('keydown', event => {
    if ((event.ctrlKey || event.metaKey) && event.key === 'f') {
      event.preventDefault();
      input.focus();
    }
    if (event.key === '/') {
      event.preventDefault();
      input.focus();
    }
    if (event.key === 'Escape') {
      input.value = '';
      input.blur();
      container.parentNode?.removeChild(container);
    }
  });

  if (initialQuery) {
    search(initialQuery);
  }
</script>
